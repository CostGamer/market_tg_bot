from aiogram import Router, types
from aiogram.filters import Command
from app.configs import all_settings

admin_media_router = Router()


@admin_media_router.message(Command("upload_video"))
async def request_video_upload(message: types.Message):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer(
        "üìπ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id.\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º file_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ.",
        parse_mode="HTML",
    )


@admin_media_router.message(lambda message: message.content_type == "video")
async def handle_video_upload(message: types.Message):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        return

    video = message.video

    if video:
        file_info = (
            "üìπ <b>–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>\n\n"
            f"<code>file_id: {video.file_id}</code>\n\n"
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</b>\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {video.file_size / (1024*1024):.2f} MB\n"
            f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video.duration} —Å–µ–∫\n"
            f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video.width}x{video.height}\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–¥–µ:</b>\n"
            '<code>await message.answer_video(video="' + video.file_id + '")</code>'
        )

        await message.answer(file_info, parse_mode="HTML")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")


@admin_media_router.message(Command("upload_photo"))
async def request_photo_upload(message: types.Message):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer(
        "üì∏ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ</b>\n\n" "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id.",
        parse_mode="HTML",
    )


@admin_media_router.message(lambda message: message.content_type == "photo")
async def handle_photo_upload(message: types.Message):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        return

    photo = message.photo[-1]  # type: ignore

    file_info = (
        "üì∏ <b>–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>\n\n"
        f"<code>file_id: {photo.file_id}</code>\n\n"
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</b>\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä: {photo.file_size / (1024*1024):.2f} MB\n"
        f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {photo.width}x{photo.height}\n\n"
        "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–¥–µ:</b>\n"
        '<code>await message.answer_photo(photo="' + photo.file_id + '")</code>'
    )

    await message.answer(file_info, parse_mode="HTML")
