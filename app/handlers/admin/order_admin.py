from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.repositories import OrderRepo
from app.configs import db_connection, all_settings
from app.states import OrderAdminStates
from app.keyboards import create_order_status_keyboard
from app.services.order_admin_service import OrderAdminService
from app.utils.order_formatter import format_order_info
from logging import getLogger

logger = getLogger(__name__)

order_admin_router = Router()


@order_admin_router.message(Command("order_status"))
async def show_order_status_menu(message: types.Message):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    parts = message.text.split()  # type: ignore
    if len(parts) != 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/order_status &lt;–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞&gt;</code>",
            parse_mode="HTML",
        )
        return

    try:
        order_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå ID –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    async with db_connection.get_session() as session:
        repo = OrderRepo(session)
        order = await repo.get_order_with_user(order_id)

        if not order:
            await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        order_info = format_order_info(order)
        keyboard = create_order_status_keyboard(order_id)

        await message.answer(order_info, parse_mode="HTML", reply_markup=keyboard)


@order_admin_router.callback_query(F.data.startswith("order_status_"))
async def handle_order_status_callback(
    callback: types.CallbackQuery, state: FSMContext
):
    if callback.from_user.id not in all_settings.different.list_of_admin_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    try:
        parts = callback.data.split("_")  # type: ignore
        order_id = int(parts[2])
        action = parts[3]

        async with db_connection.get_session() as session:
            repo = OrderRepo(session)
            service = OrderAdminService(repo, callback.bot)

            order = await repo.get_order_with_user(order_id)
            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
                return

            if action == "shipping":
                await state.update_data(order_id=order_id)
                await state.set_state(OrderAdminStates.waiting_china_track)
                await callback.message.reply(  # type: ignore
                    f"üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ö–∏—Ç–∞–µ (–∑–∞–∫–∞–∑ #{order_id}):"
                )
                await callback.answer()
                return

            elif action == "delivering":
                await state.update_data(order_id=order_id)
                await state.set_state(OrderAdminStates.waiting_russia_track)
                await callback.message.reply(  # type: ignore
                    f"üöö –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏ (–∑–∞–∫–∞–∑ #{order_id}):"
                )
                await callback.answer()
                return

            elif action == "ready":
                await state.update_data(order_id=order_id)
                await state.set_state(OrderAdminStates.waiting_qr_code)
                await callback.message.reply(  # type: ignore
                    f"üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{order_id}:"
                )
                await callback.answer()
                return

            result = await service.update_order_status_simple(order_id, action)

            if result:
                await callback.answer(f"‚úÖ {result['message']}")

                updated_order = await repo.get_order_with_user(order_id)
                if updated_order:
                    order_info = format_order_info(updated_order)
                    keyboard = create_order_status_keyboard(order_id)

                    try:
                        await callback.message.edit_text(  # type: ignore
                            order_info, parse_mode="HTML", reply_markup=keyboard
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                await callback.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!", show_alert=True
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_order_status_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@order_admin_router.message(OrderAdminStates.waiting_china_track, F.text)
async def process_china_track(message: types.Message, state: FSMContext):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    china_track = message.text.strip()  # type: ignore

    if not china_track:
        await message.reply("‚ùå –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    async with db_connection.get_session() as session:
        repo = OrderRepo(session)
        service = OrderAdminService(repo, message.bot)
        result = await service.update_order_with_china_track(order_id, china_track)  # type: ignore

        if result:
            await message.reply(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–ï–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥'\n"
                f"üá®üá≥ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: <code>{china_track}</code>",
                parse_mode="HTML",
            )
        else:
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞!")

    await state.clear()


@order_admin_router.message(OrderAdminStates.waiting_russia_track, F.text)
async def process_russia_track(message: types.Message, state: FSMContext):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    russia_track = message.text.strip()  # type: ignore

    if not russia_track:
        await message.reply("‚ùå –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    async with db_connection.get_session() as session:
        repo = OrderRepo(session)
        service = OrderAdminService(repo, message.bot)
        result = await service.update_order_with_russia_track(order_id, russia_track)  # type: ignore

        if result:
            await message.reply(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è'\n"
                f"üá∑üá∫ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: <code>{russia_track}</code>",
                parse_mode="HTML",
            )
        else:
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞!")

    await state.clear()


@order_admin_router.message(OrderAdminStates.waiting_qr_code, F.photo)
async def process_qr_code(message: types.Message, state: FSMContext):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    order_id = data.get("order_id")

    qr_photo = message.photo[-1].file_id  # type: ignore

    async with db_connection.get_session() as session:
        repo = OrderRepo(session)
        service = OrderAdminService(repo, message.bot)
        result = await service.update_order_to_ready_with_qr(order_id, qr_photo)  # type: ignore

        if result:
            await message.reply(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è'\n"
                f"üì± QR-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É"
            )
        else:
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞!")

    await state.clear()


@order_admin_router.message(OrderAdminStates.waiting_qr_code)
async def qr_code_not_photo(message: types.Message, state: FSMContext):
    if message.from_user.id not in all_settings.different.list_of_admin_ids:  # type: ignore
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")
