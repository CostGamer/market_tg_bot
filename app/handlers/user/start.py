import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.keyboards import get_start_keyboard

logger = logging.getLogger(__name__)
start_router = Router()


@start_router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChinaEasyBot!</b>\n\n"
        "üá®üá≥ –ó–¥–µ—Å—å –≤—ã –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–∂–µ—Ç–µ –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–∏—Ç–∞—è ‚Äî –±–µ–∑ —Ö–ª–æ–ø–æ—Ç –∏ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n"
        "‚Ä¢ üì¶ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ üè† –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –∞–¥—Ä–µ—Å–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ üöö –û–Ω–ª–∞–π–Ω-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –ø–æ—Å—ã–ª–æ–∫\n"
        "‚Ä¢ üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω\n"
        "‚Ä¢ üõéÔ∏è –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞!\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑!</b>"
    )

    await message.answer(
        welcome_text, reply_markup=get_start_keyboard(), parse_mode="HTML"
    )


@start_router.message(
    lambda message: message.text
    in [
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        "üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
        "üìç –ê–¥—Ä–µ—Å–∞",
        "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
        "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç",
        "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
    ]
)
async def handle_keyboard_buttons(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""

    try:
        if message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            from .profile import show_profile

            await show_profile(message)

        elif message.text == "üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
            from .order import start_order

            await start_order(message, state)

        elif message.text == "üìç –ê–¥—Ä–µ—Å–∞":
            from . import addresses

            await addresses.show_addresses_command(message, state)

        elif message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
            from .order_history import show_user_orders

            await show_user_orders(message)

        elif message.text == "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç":
            from .current_rate import show_current_rate

            await show_current_rate(message)

        elif message.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
            from .price_calc import start_calc

            await start_calc(message, state)

        elif message.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            from .support import start_support

            await start_support(message, state)

    except ImportError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {e}")
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {message.text}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
