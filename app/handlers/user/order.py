import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.repositories import AddressRepo, UserRepo, OrderRepo, AdminSettingsRepo
from app.configs import db_connection
from app.keyboards import (
    get_cancel_keyboard,
    get_yes_no_keyboard,
    get_quantity_keyboard,
    get_comment_or_send_keyboard,
    get_send_order_keyboard,
    get_addresses_keyboard_order,
    get_main_categories_keyboard_order,
    get_subcategories_keyboard_order,
)
from app.states import OrderStates
from app.services import ProfileService, OrderService, CategoryHelper
from app.utils import is_valid_url

logger = logging.getLogger(__name__)
order_router = Router()


async def handle_cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    try:
        await callback.message.edit_text(  # type: ignore
            "üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None
        )
    except Exception:
        await callback.bot.send_message(  # type: ignore
            chat_id=callback.from_user.id, text="üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )

    await state.clear()


@order_router.callback_query(F.data == "cancel_order")
async def cancel_order_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_cancel_order(callback, state)


@order_router.message(Command("order"))
async def start_order(message: types.Message, state: FSMContext):
    async with db_connection.get_session() as session:
        profile_service = ProfileService(UserRepo(session))
        address_repo = AddressRepo(session)
        order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))

        user = await profile_service.get_user(message.from_user.id)  # type: ignore
        addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore

        ready, error_msg = await order_service.check_user_ready_for_order(
            user, bool(addresses)
        )

        if not ready:
            await message.answer(error_msg)  # type: ignore
            await state.clear()
            return

        await state.update_data(
            phone=user.phone,  # type: ignore
            tg_username=user.tg_username,  # type: ignore
            addresses=[a.model_dump() for a in addresses],  # type: ignore
        )

        profile_text = (
            "üõí <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>\n\n"
            "üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:</b>\n\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone}\n"  # type: ignore
        )

        if user.tg_username:  # type: ignore
            profile_text += f"üë§ <b>Username:</b> @{user.tg_username}\n\n"  # type: ignore
        else:
            profile_text += "üë§ <b>Username:</b> –Ω–µ —É–∫–∞–∑–∞–Ω\n\n"

        profile_text += (
            "‚ÑπÔ∏è –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã, –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
        )

        await message.answer(
            profile_text, reply_markup=get_yes_no_keyboard(), parse_mode="HTML"
        )
        await state.set_state(OrderStates.confirm_profile)


@order_router.callback_query(OrderStates.confirm_profile)
async def confirm_profile(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data == "confirm_yes":
        data = await state.get_data()
        addresses = data.get("addresses", [])

        if len(addresses) == 1:
            address = addresses[0]
            await state.update_data(address_id=address["id"], address_full=address)

            async with db_connection.get_session() as session:
                order_service = OrderService(
                    OrderRepo(session), AdminSettingsRepo(session)
                )
                address_str = order_service.format_address(address)

            await callback.message.edit_text(  # type: ignore
                f"üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n"
                f"üè† {address_str}\n\n"
                f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω?",
                reply_markup=get_yes_no_keyboard(),
                parse_mode="HTML",
            )
            await state.set_state(OrderStates.confirm_address)
        else:
            kb = get_addresses_keyboard_order(addresses)
            await callback.message.edit_text(  # type: ignore
                "üìç <b>–í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:",
                reply_markup=kb,
                parse_mode="HTML",
            )
            await state.set_state(OrderStates.choosing_address)
    elif callback.data == "confirm_no":
        await callback.message.edit_text(  # type: ignore
            "üö´ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, "
            "–∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /order –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=None,
        )
        await state.clear()


@order_router.callback_query(OrderStates.choosing_address)
async def choose_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data and callback.data.startswith("address_order_"):
        try:
            address_id = int(callback.data.split("_")[2])
        except (IndexError, ValueError):
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞!")  # type: ignore
            return

        data = await state.get_data()
        addresses = data.get("addresses", [])

        address = next((a for a in addresses if a["id"] == address_id), None)

        if not address:
            await callback.message.edit_text("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # type: ignore
            return

        await state.update_data(address_id=address["id"], address_full=address)

        async with db_connection.get_session() as session:
            order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))
            address_str = order_service.format_address(address)

        await callback.message.edit_text(  # type: ignore
            f"üìç <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n"
            f"üè† {address_str}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞?",
            reply_markup=get_yes_no_keyboard(),
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.confirm_address)


@order_router.callback_query(OrderStates.confirm_address)
async def confirm_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data == "confirm_yes":
        await callback.message.edit_text(  # type: ignore
            "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:",
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(OrderStates.waiting_for_url)
    elif callback.data == "confirm_no":
        data = await state.get_data()
        addresses = data.get("addresses", [])
        kb = get_addresses_keyboard_order(addresses)
        await callback.message.edit_text(  # type: ignore
            "üìç <b>–í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=kb,
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.choosing_address)


@order_router.message(OrderStates.waiting_for_url, F.text)
async def get_url(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    url = message.text.strip()

    if not url:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    if not is_valid_url(url):
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://).",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    await state.update_data(product_url=url)
    await message.answer(
        f"üîó <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä</b>\n\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {url}\n\n"
        f"–°—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞?",
        reply_markup=get_yes_no_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(OrderStates.confirm_url)


@order_router.message(OrderStates.waiting_for_url)
async def url_invalid_format(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )


@order_router.callback_query(OrderStates.confirm_url)
async def confirm_url(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data == "confirm_yes":
        await callback.message.edit_text(  # type: ignore
            "üìÇ <b>–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_main_categories_keyboard_order(),
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.waiting_for_main_category)
    elif callback.data == "confirm_no":
        await callback.message.edit_text(  # type: ignore
            "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</b>\n\n" "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(OrderStates.waiting_for_url)


@order_router.callback_query(OrderStates.waiting_for_main_category)
async def main_category_selected(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data and callback.data.startswith("maincat_"):
        try:
            main_cat_id = callback.data.split("_")[1]
        except IndexError:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")  # type: ignore
            return

        await state.update_data(main_cat_id=main_cat_id)

        if not CategoryHelper.has_subcategories(main_cat_id):
            await state.update_data(sub_cat_id=None)
            await callback.message.edit_text(  # type: ignore
                "üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=get_cancel_keyboard(),
                parse_mode="HTML",
            )
            await state.set_state(OrderStates.waiting_for_photo)
        else:
            subcategories_kb = get_subcategories_keyboard_order(main_cat_id)
            await callback.message.edit_text(  # type: ignore
                "üìÇ <b>–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                reply_markup=subcategories_kb,
                parse_mode="HTML",
            )
            await state.set_state(OrderStates.waiting_for_subcategory)


@order_router.callback_query(OrderStates.waiting_for_subcategory)
async def subcategory_selected(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data == "back_to_main_categories":
        await callback.message.edit_text(  # type: ignore
            "üìÇ <b>–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_main_categories_keyboard_order(),
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.waiting_for_main_category)
        return

    if callback.data and callback.data.startswith("subcat_"):
        try:
            parts = callback.data.split("_")
            if len(parts) >= 3:
                sub_cat_id = parts[2]
                await state.update_data(sub_cat_id=sub_cat_id)
                await callback.message.edit_text(  # type: ignore
                    "üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                    "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                    reply_markup=get_cancel_keyboard(),
                    parse_mode="HTML",
                )
                await state.set_state(OrderStates.waiting_for_photo)
        except (IndexError, ValueError):
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")  # type: ignore


@order_router.message(OrderStates.waiting_for_photo, F.photo)
async def get_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—â—ë —Ä–∞–∑.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    photo = message.photo[-1]
    file_id = photo.file_id

    await state.update_data(photo_url=file_id)
    await message.answer(
        "üí¥ <b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —é–∞–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 150.50):",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(OrderStates.waiting_for_price)


@order_router.message(OrderStates.waiting_for_photo)
async def photo_not_sent(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )


@order_router.message(OrderStates.waiting_for_price, F.text)
async def get_price(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —é–∞–Ω—è—Ö.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    price_text = message.text.strip()
    if not price_text:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–∞—è —Ü–µ–Ω–∞</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    valid, price_yuan = CategoryHelper.validate_price(price_text)

    if not valid:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    await state.update_data(unit_price_yuan=price_yuan)

    data = await state.get_data()
    main_cat_id = data.get("main_cat_id")
    sub_cat_id = data.get("sub_cat_id")

    async with db_connection.get_session() as session:
        order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))
        price_rub = await order_service.calculate_price_in_rubles(
            price_yuan, main_cat_id, sub_cat_id  # type: ignore
        )

    await state.update_data(unit_price_rub=price_rub)

    await message.answer(
        f"üí¥ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>\n\n"
        f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: <b>{price_yuan} —é–∞–Ω–µ–π</b>\n"
        f"–ü—Ä–∏–º–µ—Ä–Ω–æ: <b>{price_rub:.2f} —Ä—É–±–ª–µ–π</b>\n\n"
        f"–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(OrderStates.confirm_price)


@order_router.message(OrderStates.waiting_for_price)
async def price_invalid_format(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )


@order_router.callback_query(OrderStates.confirm_price)
async def confirm_price(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data == "confirm_yes":
        await callback.message.edit_text(  # type: ignore
            "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
            reply_markup=get_quantity_keyboard(),
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.waiting_for_quantity)
    elif callback.data == "confirm_no":
        await callback.message.edit_text(  # type: ignore
            "üí¥ <b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —é–∞–Ω—è—Ö –µ—â—ë —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.waiting_for_price)


@order_router.callback_query(OrderStates.waiting_for_quantity)
async def get_quantity_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data in ["quantity_1", "quantity_2"]:
        try:
            quantity = int(callback.data.split("_")[1])
        except (IndexError, ValueError):
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!")  # type: ignore
            return

        await state.update_data(quantity=quantity)
        await callback.message.edit_text(  # type: ignore
            "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–µ–µ: —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, –º–æ–¥–µ–ª—å –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.waiting_for_description)
    elif callback.data == "quantity_other":
        await callback.message.edit_text(  # type: ignore
            "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.waiting_for_quantity_text)


@order_router.message(OrderStates.waiting_for_quantity_text, F.text)
async def get_quantity_text(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —á–∏—Å–ª–æ–º.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    quantity_text = message.text.strip()
    if not quantity_text:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    valid, quantity = CategoryHelper.validate_quantity(quantity_text)

    if not valid:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    await state.update_data(quantity=quantity)
    await message.answer(
        "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–µ–µ: —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, –º–æ–¥–µ–ª—å –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(OrderStates.waiting_for_description)


@order_router.message(OrderStates.waiting_for_quantity_text)
async def quantity_invalid_format(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )


@order_router.message(OrderStates.waiting_for_description, F.text)
async def get_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n" "–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    desc = message.text.strip()
    if not desc:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    await state.update_data(description=desc)

    await message.answer(
        f"üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        f"–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n"
        f"<i>{desc}</i>\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(OrderStates.confirm_description)


@order_router.message(OrderStates.waiting_for_description)
async def description_invalid_format(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )


@order_router.callback_query(OrderStates.confirm_description)
async def confirm_description(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data == "confirm_yes":
        await show_order_review(callback, state)
    elif callback.data == "confirm_no":
        await callback.message.edit_text(  # type: ignore
            "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑, —É–∫–∞–∑–∞–≤ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        await state.set_state(OrderStates.waiting_for_description)


async def show_order_review(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    async with db_connection.get_session() as session:
        order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))
        review_text = order_service.format_order_review(data)

    review_text = "üìã <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π</b>\n\n" + review_text

    photo_url = data.get("photo_url")
    if photo_url:
        await state.update_data(original_message_id=callback.message.message_id)  # type: ignore
        await callback.message.delete()  # type: ignore
        sent_message = await callback.bot.send_photo(  # type: ignore
            chat_id=callback.from_user.id,
            photo=photo_url,
            caption=review_text,
            reply_markup=get_comment_or_send_keyboard(),
            parse_mode="HTML",
        )
        await state.update_data(review_message_id=sent_message.message_id)
    else:
        await callback.message.edit_text(  # type: ignore
            review_text,
            reply_markup=get_comment_or_send_keyboard(),
            parse_mode="HTML",
        )
        await state.update_data(review_message_id=callback.message.message_id)  # type: ignore

    await state.set_state(OrderStates.waiting_for_admin_comment)


@order_router.callback_query(OrderStates.waiting_for_admin_comment)
async def order_admin_comment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel_order":
        await handle_cancel_order(callback, state)
        return

    if callback.data == "add_comment":
        data = await state.get_data()
        review_message_id = data.get("review_message_id")

        if review_message_id:
            try:
                await callback.bot.edit_message_text(  # type: ignore
                    chat_id=callback.from_user.id,
                    message_id=review_message_id,
                    text="üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                    reply_markup=get_cancel_keyboard(),
                    parse_mode="HTML",
                )
            except Exception:
                await callback.bot.send_message(  # type: ignore
                    chat_id=callback.from_user.id,
                    text="üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                    reply_markup=get_cancel_keyboard(),
                    parse_mode="HTML",
                )

        await state.set_state(OrderStates.waiting_for_admin_comment_text)
        return

    if callback.data == "send_order":
        data = await state.get_data()

        async with db_connection.get_session() as session:
            order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))

            success, message_text = await order_service.submit_order(
                callback.bot, callback.from_user.id, data  # type: ignore
            )

            if success:
                success_text = (
                    "üéâ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                    "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                    "‚è∞ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n"
                    "üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üôè"
                )
            else:
                success_text = (
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )

            review_message_id = data.get("review_message_id")
            if review_message_id:
                try:
                    await callback.bot.edit_message_text(  # type: ignore
                        chat_id=callback.from_user.id,  # type: ignore
                        message_id=review_message_id,
                        text=success_text,
                        parse_mode="HTML",
                        reply_markup=None,
                    )
                except Exception:
                    await callback.bot.send_message(  # type: ignore
                        chat_id=callback.from_user.id,
                        text=success_text,
                        parse_mode="HTML",
                    )
            else:
                try:
                    await callback.message.edit_text(  # type: ignore
                        success_text, parse_mode="HTML", reply_markup=None
                    )
                except Exception:
                    await callback.bot.send_message(  # type: ignore
                        chat_id=callback.from_user.id,
                        text=success_text,
                        parse_mode="HTML",
                    )

        await state.clear()
        return


@order_router.message(OrderStates.waiting_for_admin_comment_text, F.text)
async def admin_comment_text(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    comment = message.text.strip()
    if not comment:
        await message.answer(
            "‚ùå <b>–ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    await state.update_data(admin_comment=comment)

    sent_message = await message.answer(
        "‚úÖ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
        "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=get_send_order_keyboard(),
        parse_mode="HTML",
    )

    await state.update_data(review_message_id=sent_message.message_id)
    await state.set_state(OrderStates.waiting_for_admin_comment)


@order_router.message(OrderStates.waiting_for_admin_comment_text)
async def admin_comment_invalid_format(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )
