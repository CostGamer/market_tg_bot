import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from app.repositories import AddressRepo, UserRepo, OrderRepo, AdminSettingsRepo
from app.configs import db_connection
from app.keyboards import (
    get_yes_no_keyboard,
    get_quantity_keyboard,
    get_comment_or_send_keyboard,
    get_send_order_keyboard,
    get_main_categories_keyboard_reply,
    get_subcategories_keyboard_reply,
    get_addresses_keyboard_order,
    get_cancel_keyboard,
)
from app.states import OrderStates
from app.services import ProfileService, OrderService, CategoryHelper
from app.utils import is_valid_url

logger = logging.getLogger(__name__)
order_router = Router()


async def check_cancel(message: types.Message, state: FSMContext):
    if message.text and message.text.strip() == "–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return True
    return False


@order_router.message(Command("order"))
async def start_order(message: types.Message, state: FSMContext):
    async with db_connection.get_session() as session:
        profile_service = ProfileService(UserRepo(session))
        address_repo = AddressRepo(session)
        order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))

        user = await profile_service.get_user(message.from_user.id)  # type: ignore
        addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore

        ready, error_msg = await order_service.check_user_ready_for_order(
            user, bool(addresses)
        )

        if not ready:
            await message.answer(error_msg, reply_markup=ReplyKeyboardRemove())  # type: ignore
            await state.clear()
            return

        await state.update_data(
            phone=user.phone,  # type: ignore
            tg_username=user.tg_username,  # type: ignore
            addresses=[a.model_dump() for a in addresses],  # type: ignore
        )

        profile_text = (
            "üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:</b>\n\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone}\n"  # type: ignore
        )

        if user.tg_username:  # type: ignore
            profile_text += f"üë§ <b>Username:</b> @{user.tg_username}\n\n"  # type: ignore
        else:
            profile_text += "üë§ <b>Username:</b> –Ω–µ —É–∫–∞–∑–∞–Ω\n\n"

        profile_text += (
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã, –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )

        await message.answer(
            profile_text, reply_markup=get_yes_no_keyboard(), parse_mode="HTML"
        )
        await state.set_state(OrderStates.confirm_profile)


@order_router.message(OrderStates.confirm_profile)
async def confirm_profile(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():  # type: ignore
        data = await state.get_data()
        addresses = data.get("addresses", [])

        if len(addresses) == 1:
            address = addresses[0]
            await state.update_data(address_id=address["id"], address_full=address)

            async with db_connection.get_session() as session:
                order_service = OrderService(
                    OrderRepo(session), AdminSettingsRepo(session)
                )
                address_str = order_service.format_address(address)

            await message.answer(
                f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n{address_str}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
                reply_markup=get_yes_no_keyboard(),
            )
            await state.set_state(OrderStates.confirm_address)
        else:
            kb = get_addresses_keyboard_order(addresses)
            await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
            await state.set_state(OrderStates.choosing_address)
    else:
        await message.answer(
            "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, "
            "–∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /order –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()


@order_router.message(OrderStates.choosing_address)
async def choose_address(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    data = await state.get_data()
    addresses = data.get("addresses", [])

    address = next((a for a in addresses if a["name"] == message.text.strip()), None)  # type: ignore

    if not address:
        await message.answer(
            "‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_addresses_keyboard_order(addresses),
        )
        return

    await state.update_data(address_id=address["id"], address_full=address)

    async with db_connection.get_session() as session:
        order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))
        address_str = order_service.format_address(address)

    await message.answer(
        f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å:\n{address_str}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_address)


@order_router.message(OrderStates.confirm_address)
async def confirm_address(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():  # type: ignore
        await message.answer(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_url)
    else:
        data = await state.get_data()
        addresses = data.get("addresses", [])
        kb = get_addresses_keyboard_order(addresses)
        await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
        await state.set_state(OrderStates.choosing_address)


@order_router.message(OrderStates.waiting_for_url, F.text)
async def get_url(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    url = message.text.strip()  # type: ignore

    if not is_valid_url(url):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https).",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(product_url=url)
    await message.answer(
        f"üîó –í—ã —É–∫–∞–∑–∞–ª–∏ —Å—Å—ã–ª–∫—É:\n{url}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_url)


@order_router.message(OrderStates.confirm_url)
async def confirm_url(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():  # type: ignore
        await message.answer(  # type: ignore
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_main_categories_keyboard_reply(),
        )
        await state.set_state(OrderStates.waiting_for_main_category)
    else:
        await message.answer(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_url)


@order_router.message(OrderStates.waiting_for_main_category)
async def main_category_selected(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    main_cat_id = CategoryHelper.get_main_category_id_by_name(message.text.strip())  # type: ignore

    if not main_cat_id:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_main_categories_keyboard_reply(),
        )
        return

    await state.update_data(main_cat_id=main_cat_id)

    if not CategoryHelper.has_subcategories(main_cat_id):
        await state.update_data(sub_cat_id=None)
        await message.answer(
            "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_photo)
    else:
        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_subcategories_keyboard_reply(main_cat_id),
        )
        await state.set_state(OrderStates.waiting_for_subcategory)


@order_router.message(OrderStates.waiting_for_subcategory)
async def subcategory_selected(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    data = await state.get_data()
    main_cat_id = data.get("main_cat_id")

    if message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":  # type: ignore
        await message.answer(  # type: ignore
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_main_categories_keyboard_reply(),
        )
        await state.set_state(OrderStates.waiting_for_main_category)
        return

    subcat_id = CategoryHelper.get_subcategory_id_by_name(
        main_cat_id, message.text.strip()  # type: ignore
    )

    if not subcat_id:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_subcategories_keyboard_reply(main_cat_id),
        )
        return

    await state.update_data(sub_cat_id=subcat_id)
    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_cancel_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_photo)


@order_router.message(OrderStates.waiting_for_photo, F.photo)
async def get_photo(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    photo = message.photo[-1]  # type: ignore
    file_id = photo.file_id

    await state.update_data(photo_url=file_id)
    await message.answer(
        "üí¥ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —é–∞–Ω—è—Ö):", reply_markup=get_cancel_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_price)


@order_router.message(OrderStates.waiting_for_photo)
async def photo_not_sent(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=get_cancel_keyboard()
    )


@order_router.message(OrderStates.waiting_for_price, F.text)
async def get_price(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    valid, price_yuan = CategoryHelper.validate_price(message.text)  # type: ignore

    if not valid:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).",
            reply_markup=get_cancel_keyboard(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö –∫–∞–∫ unit_price_yuan
    await state.update_data(unit_price_yuan=price_yuan)

    data = await state.get_data()
    main_cat_id = data.get("main_cat_id")
    sub_cat_id = data.get("sub_cat_id")

    async with db_connection.get_session() as session:
        order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))
        price_rub = await order_service.calculate_price_in_rubles(
            price_yuan, main_cat_id, sub_cat_id  # type: ignore
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∫–∞–∫ unit_price_rub
    await state.update_data(unit_price_rub=price_rub)

    await message.answer(
        f"üí¥ –í—ã —É–∫–∞–∑–∞–ª–∏ —Ü–µ–Ω—É: {price_yuan} —é–∞–Ω–µ–π ({price_rub:.2f} —Ä—É–±).\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_price)


@order_router.message(OrderStates.confirm_price)
async def confirm_price(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():  # type: ignore
        await message.answer(
            "üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_quantity_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_quantity)
    else:
        await message.answer(
            "üí¥ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_price)


@order_router.message(OrderStates.waiting_for_quantity)
async def get_quantity(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    text = message.text.strip()  # type: ignore

    if text in {"1", "2"}:
        quantity = int(text)
    elif text == "–î—Ä—É–≥–æ–µ":
        await message.answer(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=get_cancel_keyboard(),
        )
        return
    else:
        valid, quantity = CategoryHelper.validate_quantity(text)  # type: ignore

        if not valid:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).",
                reply_markup=get_quantity_keyboard(),
            )
            return

    await state.update_data(quantity=quantity)
    await message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (—Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç –∏ —Ç.–¥.):", reply_markup=get_cancel_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_description)


@order_router.message(OrderStates.waiting_for_description, F.text)
async def get_description(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    desc = message.text.strip()  # type: ignore
    await state.update_data(description=desc)

    await message.answer(
        f"üìù –í—ã —É–∫–∞–∑–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{desc}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_description)


@order_router.message(OrderStates.confirm_description)
async def confirm_description(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():  # type: ignore
        await show_order_review(message, state)
    else:
        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_description)


async def show_order_review(message: types.Message, state: FSMContext):
    data = await state.get_data()

    async with db_connection.get_session() as session:
        order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))
        review_text = order_service.format_order_review(data)

    photo_url = data.get("photo_url")
    if photo_url:
        await message.answer_photo(
            photo=photo_url,
            caption=review_text,
            reply_markup=get_comment_or_send_keyboard(),
            parse_mode="HTML",
        )
    else:
        await message.answer(
            review_text,
            reply_markup=get_comment_or_send_keyboard(),
            parse_mode="HTML",
        )

    await state.set_state(OrderStates.waiting_for_admin_comment)


@order_router.message(OrderStates.waiting_for_admin_comment)
async def order_admin_comment(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    text = message.text.strip()  # type: ignore

    if text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        await message.answer(
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(OrderStates.waiting_for_admin_comment_text)
        return

    if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
        data = await state.get_data()

        async with db_connection.get_session() as session:
            order_service = OrderService(OrderRepo(session), AdminSettingsRepo(session))

            success, message_text = await order_service.submit_order(
                message.bot, message.from_user.id, data  # type: ignore
            )

            await message.answer(message_text, reply_markup=ReplyKeyboardRemove())

        await state.clear()
        return

    await state.update_data(admin_comment=text)
    await message.answer(
        "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'.",
        reply_markup=get_send_order_keyboard(),
    )


@order_router.message(OrderStates.waiting_for_admin_comment_text)
async def admin_comment_text(message: types.Message, state: FSMContext):
    if await check_cancel(message, state):
        return

    comment = message.text.strip()  # type: ignore
    await state.update_data(admin_comment=comment)  # type: ignore

    await message.answer(
        "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'.",
        reply_markup=get_send_order_keyboard(),
    )
    await state.set_state(OrderStates.waiting_for_admin_comment)
