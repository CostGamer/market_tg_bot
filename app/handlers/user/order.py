from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from app.repositories import AddressRepo, UserRepo, OrderRepo
from app.configs import db_connection, all_settings
from app.keyboards import (
    get_yes_no_keyboard,
    get_quantity_keyboard,
    get_send_order_keyboard,
    get_addresses_keyboard,
)
from app.states import OrderStates
from app.services import ProfileService
from app.utils import is_valid_phone
from app.models.pydantic_models import AddressPM, OrderPMPost

order_router = Router()


@order_router.message(Command("order"))
async def start_order(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")
    await state.set_state(OrderStates.waiting_for_url)


@order_router.message(OrderStates.waiting_for_url, F.text)
async def get_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    await state.update_data(product_url=url)
    await message.answer(
        f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Å—Å—ã–ª–∫—É:\n{url}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=get_yes_no_keyboard()
    )
    await state.set_state(OrderStates.confirm_url)


@order_router.message(OrderStates.confirm_url)
async def confirm_url(message: types.Message, state: FSMContext):
    if "–¥–∞" in message.text.lower():
        await message.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.waiting_for_photo)
    else:
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑:", reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.waiting_for_url)


@order_router.message(OrderStates.waiting_for_photo, F.photo)
async def get_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(photo_url=file_id)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —é–∞–Ω—è—Ö):")
    await state.set_state(OrderStates.waiting_for_price)


@order_router.message(OrderStates.waiting_for_price, F.text)
async def get_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", ".").strip())
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0).")
        return
    await state.update_data(unit_price=price)
    await message.answer(
        f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Ü–µ–Ω—É: {price} —é–∞–Ω–µ–π. –í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_price)


@order_router.message(OrderStates.confirm_price)
async def confirm_price(message: types.Message, state: FSMContext):
    if "–¥–∞" in message.text.lower():
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_quantity_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_quantity)
    else:
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –µ—â—ë —Ä–∞–∑:", reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.waiting_for_price)


@order_router.message(OrderStates.waiting_for_quantity)
async def get_quantity(message: types.Message, state: FSMContext):
    if message.text.strip() in {"1", "2"}:
        quantity = int(message.text.strip())
    else:
        try:
            quantity = int(message.text.strip())
            if quantity <= 0:
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
            return
    await state.update_data(quantity=quantity)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (—Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç –∏ —Ç.–¥.):", reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(OrderStates.waiting_for_description)


@order_router.message(OrderStates.waiting_for_description, F.text)
async def get_description(message: types.Message, state: FSMContext):
    desc = message.text.strip()
    await state.update_data(description=desc)
    await message.answer(
        f"–í—ã —É–∫–∞–∑–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{desc}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_description)


@order_router.message(OrderStates.confirm_description)
async def confirm_description(message: types.Message, state: FSMContext):
    if "–¥–∞" in message.text.lower():
        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            addresses = await address_repo.get_user_addresses(message.from_user.id)
            if addresses:
                kb = get_addresses_keyboard(addresses)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
                await state.set_state(OrderStates.choosing_address)
            else:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π.\nüèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:",
                    reply_markup=ReplyKeyboardRemove(),
                )
                await state.set_state(OrderStates.waiting_for_address_city)
    else:
        await message.answer(
            "–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑:", reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.waiting_for_description)


@order_router.message(OrderStates.choosing_address)
async def choose_address(message: types.Message, state: FSMContext):
    text = message.text.strip()
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        addresses = await address_repo.get_user_addresses(message.from_user.id)
        address = next((a for a in addresses if a.name == text), None)
        if address:
            await state.update_data(address_id=address.id)
            await ask_phone_and_username(message, state)
        else:
            await message.answer(
                "‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π."
            )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–æ —à–∞–≥–∞–º (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ AddressStates)
@order_router.message(OrderStates.waiting_for_address_city)
async def order_address_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if not city:
        await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(address_city=city)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –æ—Ñ–∏—Å):")
    await state.set_state(OrderStates.waiting_for_address_address)


@order_router.message(OrderStates.waiting_for_address_address)
async def order_address_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if not address:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(address_address=address)
    await message.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:")
    await state.set_state(OrderStates.waiting_for_address_index)


@order_router.message(OrderStates.waiting_for_address_index)
async def order_address_index(message: types.Message, state: FSMContext):
    index = message.text.strip()
    if not index.isdigit():
        await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    await state.update_data(address_index=int(index))
    await message.answer(
        "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Boxberry –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'):"
    )
    await state.set_state(OrderStates.waiting_for_address_name)


@order_router.message(OrderStates.waiting_for_address_name)
async def order_address_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    data = await state.get_data()
    address_data = AddressPM(
        address=data["address_address"],
        city=data["address_city"],
        index=data["address_index"],
        name=name,
    )
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        new_address = await address_repo.create_address(
            message.from_user.id, address_data
        )
        if new_address:
            await state.update_data(address_id=new_address.id)
            await ask_phone_and_username(message, state)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞!")
            await state.clear()


# --- PHONE & USERNAME ---


async def ask_phone_and_username(message: types.Message, state: FSMContext):
    async with db_connection.get_session() as session:
        profile_service = ProfileService(UserRepo(session))
        user = await profile_service.get_user(message.from_user.id)
        if not user or not user.phone:
            await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
            await state.set_state(OrderStates.waiting_for_phone)
            return
        if not user.tg_username:
            await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
            await state.set_state(OrderStates.waiting_for_username)
            return
    await show_order_review(message, state)


@order_router.message(OrderStates.waiting_for_phone)
async def order_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–º–µ—Ä: +79001234567")
        return
    await state.update_data(phone=phone)
    await show_order_review(message, state)


@order_router.message(OrderStates.waiting_for_username)
async def order_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not username.startswith("@") or len(username) < 3:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)."
        )
        return
    await state.update_data(tg_username=username)
    await show_order_review(message, state)


# --- REVIEW & SUBMIT ---


async def show_order_review(message: types.Message, state: FSMContext):
    data = await state.get_data()
    review_text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n\n"
        f"–°—Å—ã–ª–∫–∞: {data.get('product_url')}\n"
        f"–§–æ—Ç–æ: [–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ]\n"
        f"–¶–µ–Ω–∞: {data.get('unit_price')} —é–∞–Ω–µ–π\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('quantity')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address_id')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '[–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è]')}\n"
        f"Username: {data.get('tg_username', '[–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è]')}\n\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'"
    )
    await message.answer(review_text, reply_markup=get_send_order_keyboard())
    await state.set_state(OrderStates.waiting_for_admin_comment)


@order_router.message(OrderStates.waiting_for_admin_comment)
async def order_admin_comment(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    admin_comment = ""
    if text != "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
        admin_comment = text

    async with db_connection.get_session() as session:
        order_repo = OrderRepo(session)
        order_data = OrderPMPost(
            description=data["description"],
            product_url=data["product_url"],
            final_price=float(data["unit_price"]) * int(data["quantity"]),
            status="–Ω–æ–≤—ã–π",
            quantity=int(data["quantity"]),
            unit_price=float(data["unit_price"]),
            photo_url=data["photo_url"],
            track_cn="",
            track_ru="",
            address_id=data["address_id"],
            user_id=message.from_user.id,
        )
        order = await order_repo.create_order(message.from_user.id, order_data)
        if order:
            admin_text = (
                f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.quantity} —à—Ç.\n"
                f"ID –∑–∞–∫–∞–∑–∞: {order.user_id}\n"
                f"–°—Å—ã–ª–∫–∞: {order.product_url}\n"
                f"–¶–µ–Ω–∞: {order.unit_price} √ó {order.quantity} = {order.final_price} —é–∞–Ω–µ–π\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞: {admin_comment or '[–Ω–µ—Ç]'}"
            )
            await message.bot.send_photo(
                chat_id=all_settings.different.orders_group_id,
                photo=order.photo_url,
                caption=admin_text,
                parse_mode="HTML",
            )
            await message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!",
                reply_markup=ReplyKeyboardRemove(),
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=ReplyKeyboardRemove(),
            )
    await state.clear()
