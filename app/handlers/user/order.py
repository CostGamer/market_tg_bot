import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from app.repositories import AddressRepo, UserRepo, OrderRepo, AdminSettingsRepo
from app.configs import db_connection, all_settings
from app.keyboards import (
    get_yes_no_keyboard,
    get_quantity_keyboard,
    get_comment_or_send_keyboard,
    get_send_order_keyboard,
    get_main_categories_keyboard_reply,
    get_subcategories_keyboard_reply,
    get_addresses_keyboard_order,
    get_cancel_keyboard,
)
from app.states import OrderStates
from app.services import ProfileService, PriceCalculator
from app.utils import is_valid_url
from app.models.pydantic_models import OrderPMPost
from app.configs.mappers import MAIN_CATEGORY_NAMES, SUBCATEGORY_NAMES, KILO_MAPPER

logger = logging.getLogger(__name__)
order_router = Router()


async def check_cancel(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'"""
    if message.text and message.text.strip() == "–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return True
    return False


@order_router.message(Command("order"))
async def start_order(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è –∏ –∞–¥—Ä–µ—Å–∞"""
    async with db_connection.get_session() as session:
        profile_service = ProfileService(UserRepo(session))
        address_repo = AddressRepo(session)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await profile_service.get_user(message.from_user.id)
        addresses = await address_repo.get_user_addresses(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        if not user or not user.phone or not user.tg_username:
            await message.answer(
                "‚ùóÔ∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ username\n"
                "2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /order",
                reply_markup=ReplyKeyboardRemove(),
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
        if not addresses:
            await message.answer(
                "‚ùóÔ∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addresses –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞\n"
                "2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /order",
                reply_markup=ReplyKeyboardRemove(),
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(
            phone=user.phone,
            tg_username=user.tg_username,
            addresses=[a.model_dump() for a in addresses],
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        profile_text = (
            "üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:**\n\n"
            f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone}\n"
            f"üë§ **Username:** @{user.tg_username}\n\n"
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã, –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )

        await message.answer(
            profile_text, reply_markup=get_yes_no_keyboard(), parse_mode="Markdown"
        )
        await state.set_state(OrderStates.confirm_profile)


@order_router.message(OrderStates.confirm_profile)
async def confirm_profile(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞
        data = await state.get_data()
        addresses = data.get("addresses", [])

        if len(addresses) == 1:
            # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –µ–≥–æ
            address = addresses[0]
            await state.update_data(address_id=address["id"], address_full=address)

            address_str = f"{address['city']}, {address['address']}, {address['index']}, {address['name']}"
            await message.answer(
                f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n{address_str}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
                reply_markup=get_yes_no_keyboard(),
            )
            await state.set_state(OrderStates.confirm_address)
        else:
            # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            kb = get_addresses_keyboard_order(addresses)
            await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
            await state.set_state(OrderStates.choosing_address)
    else:
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        await message.answer(
            "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, "
            "–∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /order –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()


@order_router.message(OrderStates.choosing_address)
async def choose_address(message: types.Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if await check_cancel(message, state):
        return

    data = await state.get_data()
    addresses = data.get("addresses", [])

    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    address = next((a for a in addresses if a["name"] == message.text.strip()), None)

    if not address:
        await message.answer(
            "‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_addresses_keyboard_order(addresses),
        )
        return

    await state.update_data(address_id=address["id"], address_full=address)

    address_str = f"{address['city']}, {address['address']}, {address['index']}, {address['name']}"
    await message.answer(
        f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å:\n{address_str}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_address)


@order_router.message(OrderStates.confirm_address)
async def confirm_address(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():
        await message.answer(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_url)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞
        data = await state.get_data()
        addresses = data.get("addresses", [])
        kb = get_addresses_keyboard_order(addresses)
        await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
        await state.set_state(OrderStates.choosing_address)


@order_router.message(OrderStates.waiting_for_url, F.text)
async def get_url(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
    if await check_cancel(message, state):
        return

    url = message.text.strip()

    if not is_valid_url(url):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https).",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(product_url=url)
    await message.answer(
        f"üîó –í—ã —É–∫–∞–∑–∞–ª–∏ —Å—Å—ã–ª–∫—É:\n{url}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_url)


@order_router.message(OrderStates.confirm_url)
async def confirm_url(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():
        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_main_categories_keyboard_reply(),
        )
        await state.set_state(OrderStates.waiting_for_main_category)
    else:
        await message.answer(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_url)


@order_router.message(OrderStates.waiting_for_main_category)
async def main_category_selected(message: types.Message, state: FSMContext):
    """–í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if await check_cancel(message, state):
        return

    # –ü–æ–∏—Å–∫ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    main_cat_id = None
    for k, v in MAIN_CATEGORY_NAMES.items():
        if v == message.text.strip():
            main_cat_id = k
            break

    if not main_cat_id:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_main_categories_keyboard_reply(),
        )
        return

    await state.update_data(main_cat_id=main_cat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subcats = KILO_MAPPER[main_cat_id]

    if isinstance(subcats, int):
        # –ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
        await state.update_data(sub_cat_id=None)
        await message.answer(
            "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_photo)
    else:
        # –ï—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_subcategories_keyboard_reply(main_cat_id),
        )
        await state.set_state(OrderStates.waiting_for_subcategory)


@order_router.message(OrderStates.waiting_for_subcategory)
async def subcategory_selected(message: types.Message, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if await check_cancel(message, state):
        return

    data = await state.get_data()
    main_cat_id = data.get("main_cat_id")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_main_categories_keyboard_reply(),
        )
        await state.set_state(OrderStates.waiting_for_main_category)
        return

    # –ü–æ–∏—Å–∫ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcat_id = None
    subcats = SUBCATEGORY_NAMES.get(main_cat_id, {})
    for k, v in subcats.items():
        if v == message.text.strip():
            subcat_id = k
            break

    if not subcat_id:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_subcategories_keyboard_reply(main_cat_id),
        )
        return

    await state.update_data(sub_cat_id=subcat_id)
    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_cancel_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_photo)


@order_router.message(OrderStates.waiting_for_photo, F.photo)
async def get_photo(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    if await check_cancel(message, state):
        return

    photo = message.photo[-1]
    file_id = photo.file_id

    await state.update_data(photo_url=file_id)
    await message.answer(
        "üí¥ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —é–∞–Ω—è—Ö):", reply_markup=get_cancel_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_price)


@order_router.message(OrderStates.waiting_for_photo)
async def photo_not_sent(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ —Ñ–æ—Ç–æ"""
    if await check_cancel(message, state):
        return

    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=get_cancel_keyboard()
    )


@order_router.message(OrderStates.waiting_for_price, F.text)
async def get_price(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    if await check_cancel(message, state):
        return

    try:
        price = float(message.text.replace(",", ".").strip())
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(unit_price=price)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö
    data = await state.get_data()
    main_cat_id = data.get("main_cat_id")
    sub_cat_id = data.get("sub_cat_id")

    async with db_connection.get_session() as session:
        admin_settings_repo = AdminSettingsRepo(session)
        calc = PriceCalculator(price, admin_settings_repo)
        rub, _ = await calc.calculate_price(
            price, category=main_cat_id, subcategory=sub_cat_id
        )

    await state.update_data(price_rub=rub)

    await message.answer(
        f"üí¥ –í—ã —É–∫–∞–∑–∞–ª–∏ —Ü–µ–Ω—É: {price} —é–∞–Ω–µ–π ({rub:.2f} —Ä—É–±).\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_price)


@order_router.message(OrderStates.confirm_price)
async def confirm_price(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():
        await message.answer(
            "üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_quantity_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_quantity)
    else:
        await message.answer(
            "üí¥ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_price)


@order_router.message(OrderStates.waiting_for_quantity)
async def get_quantity(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    if await check_cancel(message, state):
        return

    text = message.text.strip()

    if text in {"1", "2"}:
        quantity = int(text)
    elif text == "–î—Ä—É–≥–æ–µ":
        await message.answer(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=get_cancel_keyboard(),
        )
        return
    else:
        try:
            quantity = int(text)
            if quantity <= 0:
                raise ValueError
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).",
                reply_markup=get_quantity_keyboard(),
            )
            return

    await state.update_data(quantity=quantity)
    await message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (—Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç –∏ —Ç.–¥.):", reply_markup=get_cancel_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_description)


@order_router.message(OrderStates.waiting_for_description, F.text)
async def get_description(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if await check_cancel(message, state):
        return

    desc = message.text.strip()
    await state.update_data(description=desc)

    await message.answer(
        f"üìù –í—ã —É–∫–∞–∑–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{desc}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_yes_no_keyboard(),
    )
    await state.set_state(OrderStates.confirm_description)


@order_router.message(OrderStates.confirm_description)
async def confirm_description(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if await check_cancel(message, state):
        return

    if "–¥–∞" in message.text.lower():
        await show_order_review(message, state)
    else:
        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_description)


async def show_order_review(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–¥—Ä–µ—Å–æ–º
    address = data.get("address_full")
    address_str = (
        f'{address["city"]}, {address["address"]}, {address["index"]}, {address["name"]}'
        if address
        else "[–Ω–µ –Ω–∞–π–¥–µ–Ω]"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = MAIN_CATEGORY_NAMES.get(data.get("main_cat_id", ""), "")
    if data.get("sub_cat_id"):
        subcategory_name = SUBCATEGORY_NAMES.get(data.get("main_cat_id"), {}).get(
            data.get("sub_cat_id"), ""
        )
        category_full = f"{category_name} / {subcategory_name}"
    else:
        category_full = category_name

    # –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    unit_price = data.get("unit_price", 0)
    quantity = data.get("quantity", 1)
    final_price_yuan = unit_price * quantity
    final_price_rub = data.get("price_rub", 0) * quantity

    review_text = (
        "üìã **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:**\n\n"
        f"üîó **–°—Å—ã–ª–∫–∞:** {data.get('product_url')}\n"
        f"üì∏ **–§–æ—Ç–æ:** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
        f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_full}\n"
        f"üí¥ **–¶–µ–Ω–∞:** {unit_price} —é–∞–Ω–µ–π ({data.get('price_rub', 0):.2f} —Ä—É–±)\n"
        f"üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity}\n"
        f"üí∞ **–ò—Ç–æ–≥–æ:** {final_price_yuan} —é–∞–Ω–µ–π ({final_price_rub:.2f} —Ä—É–±)\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data.get('description')}\n"
        f"üìç **–ê–¥—Ä–µ—Å:** {address_str}\n"
        f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {data.get('phone')}\n"
        f"üë§ **Username:** @{data.get('tg_username')}\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    photo_url = data.get("photo_url")
    if photo_url:
        await message.answer_photo(
            photo=photo_url,
            caption=review_text,
            reply_markup=get_comment_or_send_keyboard(),
            parse_mode="Markdown",
        )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            review_text,
            reply_markup=get_comment_or_send_keyboard(),
            parse_mode="Markdown",
        )

    await state.set_state(OrderStates.waiting_for_admin_comment)


@order_router.message(OrderStates.waiting_for_admin_comment)
async def order_admin_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if await check_cancel(message, state):
        return

    text = message.text.strip()

    if text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        await message.answer(
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(OrderStates.waiting_for_admin_comment_text)
        return

    if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
        await submit_order(message, state)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    await state.update_data(admin_comment=text)
    await message.answer(
        "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'.",
        reply_markup=get_send_order_keyboard(),
    )


@order_router.message(OrderStates.waiting_for_admin_comment_text)
async def admin_comment_text(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if await check_cancel(message, state):
        return

    comment = message.text.strip()
    await state.update_data(admin_comment=comment)

    await message.answer(
        "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'.",
        reply_markup=get_send_order_keyboard(),
    )
    await state.set_state(OrderStates.waiting_for_admin_comment)


async def submit_order(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()
    address = data.get("address_full")

    async with db_connection.get_session() as session:
        order_repo = OrderRepo(session)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = OrderPMPost(
            description=data["description"],
            product_url=data["product_url"],
            final_price=float(data["unit_price"]) * int(data["quantity"]),
            status="–Ω–æ–≤—ã–π",
            quantity=int(data["quantity"]),
            unit_price=float(data["unit_price"]),
            photo_url=data["photo_url"],
            track_cn="",
            track_ru="",
            address_id=data["address_id"],
            user_id=message.from_user.id,
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å ID
        created_order = await order_repo.create_order(message.from_user.id, order_data)

        if created_order:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            address_str = (
                f'{address["city"]}, {address["address"]}, {address["index"]}, {address["name"]}'
                if address
                else "[–Ω–µ –Ω–∞–π–¥–µ–Ω]"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_name = MAIN_CATEGORY_NAMES.get(data.get("main_cat_id", ""), "")
            if data.get("sub_cat_id"):
                subcategory_name = SUBCATEGORY_NAMES.get(
                    data.get("main_cat_id"), {}
                ).get(data.get("sub_cat_id"), "")
                category_full = f"{category_name} / {subcategory_name}"
            else:
                category_full = category_name

            admin_comment = data.get("admin_comment", "")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ created_order –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
            admin_text = (
                f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{created_order.user_id}</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{data.get('tg_username')}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone')}\n\n"
                f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {created_order.product_url}\n"
                f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_full}\n"
                f"üí¥ <b>–¶–µ–Ω–∞:</b> {created_order.unit_price} —é–∞–Ω–µ–π √ó {created_order.quantity} = {created_order.final_price} —é–∞–Ω–µ–π "
                f"({data.get('price_rub', 0) * data.get('quantity'):.2f} —Ä—É–±)\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {created_order.description}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address_str}\n"
            )

            if admin_comment:
                admin_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {admin_comment}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤
            await message.bot.send_photo(
                chat_id=all_settings.different.orders_group_id,
                photo=created_order.photo_url,
                caption=admin_text,
                parse_mode="HTML",
            )

            await message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=ReplyKeyboardRemove(),
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=ReplyKeyboardRemove(),
            )

    await state.clear()
