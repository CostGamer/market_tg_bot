from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.repositories import AddressRepo, UserRepo
from app.configs import db_connection
from app.keyboards import (
    get_addresses_keyboard,
    get_profile_keyboard,
    get_address_manage_keyboard,
    get_confirmation_keyboard,
)
from app.states import AddressStates, ProfileStates
from app.models.pydantic_models import AddressPM
from app.services import ProfileService

addresses_router = Router()

MAX_ADDRESSES = 3


@addresses_router.message(Command("addresses"))
async def show_addresses_command(message: types.Message, state: FSMContext):
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore

        if addresses is None:
            addresses = []

        if len(addresses) == 0:  # type: ignore
            profile_service = ProfileService(UserRepo(session))
            user = await profile_service.get_user(message.from_user.id)  # type: ignore
            if not user or not user.name or not user.phone:
                await message.answer(
                    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.\n"
                    "–ê –∑–∞—Ç–µ–º –∑–∞–Ω–æ–≤–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /addresses",
                    reply_markup=get_profile_keyboard(),
                )
                await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
                await state.set_state(ProfileStates.waiting_for_name)
                return

            await message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:")
            await state.set_state(AddressStates.waiting_for_city)
        else:
            keyboard = get_addresses_keyboard(addresses)
            text = f"üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞ ({len(addresses)}/{MAX_ADDRESSES}):"  # type: ignore
            await message.answer(text, reply_markup=keyboard)
            await state.set_state(AddressStates.choosing_address)


@addresses_router.callback_query(AddressStates.choosing_address)
async def choose_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "add_address":
        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            addresses = await address_repo.get_user_addresses(callback.from_user.id)

            if addresses is None:
                addresses = []

            if len(addresses) >= MAX_ADDRESSES:  # type: ignore
                await callback.message.edit_text(  # type: ignore
                    f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–¥—Ä–µ—Å–æ–≤!\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –º–∞–∫—Å–∏–º—É–º {MAX_ADDRESSES} –∞–¥—Ä–µ—Å–æ–≤. "
                    f"–£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                                    callback_data="back_to_list",
                                )
                            ]
                        ]
                    ),
                )
                return

            profile_service = ProfileService(UserRepo(session))
            user = await profile_service.get_user(callback.from_user.id)
            if not user or not user.name or not user.phone:
                await callback.message.edit_text(  # type: ignore
                    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.\n"
                    "–ê –∑–∞—Ç–µ–º –∑–∞–Ω–æ–≤–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /addresses",
                    reply_markup=get_profile_keyboard(),
                )
                await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")  # type: ignore
                await state.set_state(ProfileStates.waiting_for_name)
                return

        await callback.message.edit_text("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:")  # type: ignore
        await state.set_state(AddressStates.waiting_for_city)
        return

    if callback.data == "back_to_list":
        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            addresses = await address_repo.get_user_addresses(callback.from_user.id)

            if addresses is None:
                addresses = []

            keyboard = get_addresses_keyboard(addresses)

            if len(addresses) == 0:  # type: ignore
                text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"
            else:
                text = f"üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞ ({len(addresses)}/{MAX_ADDRESSES}):"  # type: ignore

            await callback.message.edit_text(text, reply_markup=keyboard)  # type: ignore
            await state.set_state(AddressStates.choosing_address)
        return

    if callback.data.startswith("address_"):  # type: ignore
        address_id = int(callback.data.split("_")[1])  # type: ignore
        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            addresses = await address_repo.get_user_addresses(callback.from_user.id)

            if addresses is None:
                addresses = []

            address = next((a for a in addresses if a.id == address_id), None)  # type: ignore
            if address:
                await state.update_data(selected_address_id=address.id)
                keyboard = get_address_manage_keyboard()
                await callback.message.edit_text(  # type: ignore
                    f"üìç <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</b>\n\n"
                    f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {address.city}\n"
                    f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address.address}\n"
                    f"üìÆ <b>–ò–Ω–¥–µ–∫—Å:</b> {address.index}\n"
                    f"üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {address.name}",
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )
                await state.set_state(AddressStates.manage_address)
            else:
                await callback.message.edit_text("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # type: ignore


@addresses_router.callback_query(AddressStates.manage_address)
async def manage_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    address_id = data.get("selected_address_id")

    if callback.data == "delete_address":
        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            await address_repo.delete_address(address_id)  # type: ignore
            await callback.message.edit_text("üóëÔ∏è –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")  # type: ignore
            addresses = await address_repo.get_user_addresses(callback.from_user.id)

            if addresses is None:
                addresses = []

            if len(addresses) == 0:  # type: ignore
                await callback.message.edit_text("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:")  # type: ignore
                await state.set_state(AddressStates.waiting_for_city)
            else:
                keyboard = get_addresses_keyboard(addresses)
                text = f"üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞ ({len(addresses)}/{MAX_ADDRESSES}):"  # type: ignore
                await callback.message.edit_text(text, reply_markup=keyboard)  # type: ignore
                await state.set_state(AddressStates.choosing_address)
    elif callback.data == "back_to_addresses":
        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            addresses = await address_repo.get_user_addresses(callback.from_user.id)

            if addresses is None:
                addresses = []

            keyboard = get_addresses_keyboard(addresses)

            if len(addresses) == 0:  # type: ignore
                text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"
            else:
                text = f"üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞ ({len(addresses)}/{MAX_ADDRESSES}):"  # type: ignore

            await callback.message.edit_text(text, reply_markup=keyboard)  # type: ignore
            await state.set_state(AddressStates.choosing_address)


@addresses_router.message(AddressStates.waiting_for_city)
async def address_city(message: types.Message, state: FSMContext):
    city = message.text.strip()  # type: ignore
    if not city:
        await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(city=city)
    keyboard = get_confirmation_keyboard()
    await message.answer(
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {city}\n\n" f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await state.set_state(AddressStates.confirm_city)


@addresses_router.callback_query(AddressStates.confirm_city)
async def confirm_city(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "confirm_yes":
        await callback.message.edit_text(  # type: ignore
            "üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –æ—Ñ–∏—Å):"
        )
        await state.set_state(AddressStates.waiting_for_address)
    elif callback.data == "confirm_no":
        await callback.message.edit_text("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:")  # type: ignore
        await state.set_state(AddressStates.waiting_for_city)


@addresses_router.message(AddressStates.waiting_for_address)
async def address_address(message: types.Message, state: FSMContext):
    address = message.text.strip()  # type: ignore
    if not address:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(address=address)
    keyboard = get_confirmation_keyboard()
    await message.answer(
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address}\n\n" f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await state.set_state(AddressStates.confirm_address)


@addresses_router.callback_query(AddressStates.confirm_address)
async def confirm_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "confirm_yes":
        await callback.message.edit_text("üìÆ –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (6 —Ü–∏—Ñ—Ä):")  # type: ignore
        await state.set_state(AddressStates.waiting_for_index)
    elif callback.data == "confirm_no":
        await callback.message.edit_text(  # type: ignore
            "üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –æ—Ñ–∏—Å):"
        )
        await state.set_state(AddressStates.waiting_for_address)


@addresses_router.message(AddressStates.waiting_for_index)
async def address_index(message: types.Message, state: FSMContext):
    index = message.text.strip()  # type: ignore

    if not index.isdigit():
        await message.answer(
            "‚ùå –ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    if len(index) != 6:
        await message.answer(
            "‚ùå –ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 6 —Ü–∏—Ñ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    if index == "000000":
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(index=int(index))
    keyboard = get_confirmation_keyboard()
    await message.answer(
        f"üìÆ <b>–ò–Ω–¥–µ–∫—Å:</b> {index}\n\n" f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await state.set_state(AddressStates.confirm_index)


@addresses_router.callback_query(AddressStates.confirm_index)
async def confirm_index(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "confirm_yes":
        await callback.message.edit_text(  # type: ignore
            "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Boxberry –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–°–î–≠–ö –Ω–∞ –õ–µ–Ω–∏–Ω–∞'):"
        )
        await state.set_state(AddressStates.waiting_for_name)
    elif callback.data == "confirm_no":
        await callback.message.edit_text("üìÆ –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (6 —Ü–∏—Ñ—Ä):")  # type: ignore
        await state.set_state(AddressStates.waiting_for_index)


@addresses_router.message(AddressStates.waiting_for_name)
async def address_name(message: types.Message, state: FSMContext):
    name = message.text.strip()  # type: ignore
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(name=name)
    keyboard = get_confirmation_keyboard()
    await message.answer(
        f"üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n\n" f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await state.set_state(AddressStates.confirm_name)


@addresses_router.callback_query(AddressStates.confirm_name)
async def confirm_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "confirm_yes":
        data = await state.get_data()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="save_address"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_address"
                    )
                ],
            ]
        )

        await callback.message.edit_text(  # type: ignore
            f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:</b>\n\n"
            f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {data['city']}\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
            f"üìÆ <b>–ò–Ω–¥–µ–∫—Å:</b> {data['index']}\n"
            f"üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        await state.set_state(AddressStates.final_confirmation)
    elif callback.data == "confirm_no":
        await callback.message.edit_text(  # type: ignore
            "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Boxberry –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–°–î–≠–ö –Ω–∞ –õ–µ–Ω–∏–Ω–∞'):"
        )
        await state.set_state(AddressStates.waiting_for_name)


@addresses_router.callback_query(AddressStates.final_confirmation)
async def final_confirmation(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "save_address":
        data = await state.get_data()
        address_data = AddressPM(
            address=data["address"],
            city=data["city"],
            index=data["index"],
            name=data["name"],
        )

        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            new_address = await address_repo.create_address(
                callback.from_user.id, address_data
            )

            if new_address:
                await callback.message.edit_text("‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")  # type: ignore
                addresses = await address_repo.get_user_addresses(callback.from_user.id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ addresses –Ω–µ None
                if addresses is None:
                    addresses = []

                keyboard = get_addresses_keyboard(addresses)

                text = f"üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞ ({len(addresses)}/{MAX_ADDRESSES}):"  # type: ignore
                await callback.message.answer(text, reply_markup=keyboard)  # type: ignore
                await state.set_state(AddressStates.choosing_address)
            else:
                await callback.message.edit_text(  # type: ignore
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
                await state.clear()
    elif callback.data == "cancel_address":
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")  # type: ignore
        await state.clear()
