from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from app.repositories import AddressRepo, UserRepo
from app.configs import db_connection
from app.keyboards import (
    get_addresses_keyboard,
    get_address_manage_keyboard,
    get_edit_address_field_keyboard,
    get_profile_keyboard,
)
from app.states import AddressStates, ProfileStates
from app.models.pydantic_models import AddressPM
from app.services import ProfileService

addresses_router = Router()


@addresses_router.message(Command("addresses"))
async def show_addresses_command(message: types.Message, state: FSMContext):
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore
        keyboard = get_addresses_keyboard(addresses)
        await message.answer("üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard)
    await state.set_state(AddressStates.choosing_address)


@addresses_router.message(AddressStates.choosing_address)
async def choose_address(message: types.Message, state: FSMContext):
    text = message.text.strip()  # type: ignore
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å":
        async with db_connection.get_session() as session:
            profile_service = ProfileService(UserRepo(session))
            user = await profile_service.get_user(message.from_user.id)  # type: ignore
            if not user or not user.name or not user.phone:
                await message.answer(
                    "–ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.\n–ê –∑–∞—Ç–µ–º –∑–∞–Ω–æ–≤–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /addresses",
                    reply_markup=get_profile_keyboard(),
                )
                await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
                await state.set_state(ProfileStates.waiting_for_name)
                return
        await message.answer(
            "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AddressStates.waiting_for_city)
        return
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore
        address = next((a for a in addresses if a.name == text), None)  # type: ignore
        if address:
            await state.update_data(selected_address_id=address.id)
            keyboard = get_address_manage_keyboard()
            await message.answer(
                f"<b>–ê–¥—Ä–µ—Å:</b>\n–ì–æ—Ä–æ–¥: {address.city}\n–ê–¥—Ä–µ—Å: {address.address}\n–ò–Ω–¥–µ–∫—Å: {address.index}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {address.name}",
                reply_markup=keyboard,
                parse_mode="HTML",
            )
            await state.set_state(AddressStates.manage_address)
        else:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")


@addresses_router.message(AddressStates.manage_address)
async def manage_address(message: types.Message, state: FSMContext):
    text = message.text.strip()  # type: ignore
    data = await state.get_data()
    address_id = data.get("selected_address_id")
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
        keyboard = get_edit_address_field_keyboard()
        await message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
        await state.set_state(AddressStates.edit_field_choice)
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å":
        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            await address_repo.delete_address(address_id)  # type: ignore
            await message.answer("‚úÖ –ê–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω!", reply_markup=ReplyKeyboardRemove())
            addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore
            keyboard = get_addresses_keyboard(addresses)
            await message.answer("üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard)
            await state.set_state(AddressStates.choosing_address)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        async with db_connection.get_session() as session:
            address_repo = AddressRepo(session)
            addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore
            keyboard = get_addresses_keyboard(addresses)
            await message.answer("üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard)
            await state.set_state(AddressStates.choosing_address)


@addresses_router.message(AddressStates.edit_field_choice)
async def edit_field_choice(message: types.Message, state: FSMContext):
    text = message.text.strip()  # type: ignore
    field_map = {
        "‚úèÔ∏è –ò–º—è": "name",
        "üèôÔ∏è –ì–æ—Ä–æ–¥": "city",
        "üè† –ê–¥—Ä–µ—Å": "address",
        "üî¢ –ò–Ω–¥–µ–∫—Å": "index",
        "‚ùå –û—Ç–º–µ–Ω–∞": "cancel",
    }
    field = field_map.get(text)
    if field == "cancel":
        await message.answer(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    if field:
        await state.update_data(field=field)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:")
        await state.set_state(AddressStates.waiting_for_edit_field)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@addresses_router.message(AddressStates.waiting_for_edit_field)
async def handle_edit_field_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field = data.get("field")
    address_id = data.get("selected_address_id")
    new_value = message.text.strip()  # type: ignore
    if not new_value:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    if field == "index":
        if not (new_value.isdigit() and len(new_value) == 6):
            await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 6 —Ü–∏—Ñ—Ä!")
            return
        if new_value == "000000":
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å!")
            return
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore
        current_address = next((a for a in addresses if a.id == address_id), None)  # type: ignore
        if not current_address:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return
        address_data = AddressPM(
            name=current_address.name if field != "name" else new_value,
            city=current_address.city if field != "city" else new_value,
            address=current_address.address if field != "address" else new_value,
            index=(current_address.index if field != "index" else int(new_value)),
        )
        updated = await address_repo.update_address(
            address_id=address_id, address_data=address_data  # type: ignore
        )
        if updated:
            await message.answer(
                "‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove()
            )
            addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore
            keyboard = get_addresses_keyboard(addresses)
            await message.answer("üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard)
            await state.set_state(AddressStates.choosing_address)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞!")
            await state.clear()


@addresses_router.message(AddressStates.waiting_for_city)
async def address_city(message: types.Message, state: FSMContext):
    city = message.text.strip()  # type: ignore
    if not city:
        await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(city=city)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –æ—Ñ–∏—Å):")
    await state.set_state(AddressStates.waiting_for_address)


@addresses_router.message(AddressStates.waiting_for_address)
async def address_address(message: types.Message, state: FSMContext):
    address = message.text.strip()  # type: ignore
    if not address:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(address=address)
    await message.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:")
    await state.set_state(AddressStates.waiting_for_index)


@addresses_router.message(AddressStates.waiting_for_index)
async def address_index(message: types.Message, state: FSMContext):
    index = message.text.strip()  # type: ignore
    if not index.isdigit():
        await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    if len(index) != 6:
        await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä!")
        return
    if index == "000000":
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å!")
        return
    await state.update_data(index=int(index))
    await message.answer(
        "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Boxberry –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'):"
    )
    await state.set_state(AddressStates.waiting_for_name)


@addresses_router.message(AddressStates.waiting_for_name)
async def address_name(message: types.Message, state: FSMContext):
    name = message.text.strip()  # type: ignore
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(name=name)
    data = await state.get_data()
    address_data = AddressPM(
        address=data["address"],
        city=data["city"],
        index=data["index"],
        name=data["name"],
    )
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        new_address = await address_repo.create_address(
            message.from_user.id, address_data  # type: ignore
        )
        if new_address:
            await message.answer(
                "‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove()
            )
            addresses = await address_repo.get_user_addresses(message.from_user.id)  # type: ignore
            keyboard = get_addresses_keyboard(addresses)
            await message.answer("üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard)
            await state.set_state(AddressStates.choosing_address)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞!")
            await state.clear()
