from logging import getLogger
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.repositories import AddressRepo
from app.configs import db_connection
from app.keyboards import (
    get_addresses_keyboard,
    get_address_manage_keyboard,
    get_edit_address_field_keyboard,
)
from app.states import AddressStates
from app.models.pydantic_models import AddressPM

logger = getLogger(__name__)

addresses_router = Router()


@addresses_router.message(Command("addresses"))
async def show_addresses_command(message: types.Message, state: FSMContext):
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        addresses = await address_repo.get_user_addresses(message.from_user.id)
        keyboard = get_addresses_keyboard(addresses)
        await message.answer(
            "üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard, parse_mode="HTML"
        )


@addresses_router.callback_query(F.data == "add_address")
async def handle_add_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:")
    await state.set_state(AddressStates.waiting_for_city)


@addresses_router.message(AddressStates.waiting_for_city)
async def address_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if not city:
        await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(city=city)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –æ—Ñ–∏—Å):")
    await state.set_state(AddressStates.waiting_for_address)


@addresses_router.message(AddressStates.waiting_for_address)
async def address_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if not address:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(address=address)
    await message.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:")
    await state.set_state(AddressStates.waiting_for_index)


@addresses_router.message(AddressStates.waiting_for_index)
async def address_index(message: types.Message, state: FSMContext):
    index = message.text.strip()
    if not index.isdigit():
        await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    await state.update_data(index=int(index))
    await message.answer(
        "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Boxberry –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'):"
    )
    await state.set_state(AddressStates.waiting_for_name)


@addresses_router.message(AddressStates.waiting_for_name)
async def address_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(name=name)
    data = await state.get_data()
    address_data = AddressPM(
        address=data["address"],
        city=data["city"],
        index=data["index"],
        name=data["name"],
    )
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        new_address = await address_repo.create_address(
            message.from_user.id, address_data
        )
        if new_address:
            await message.answer("‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            addresses = await address_repo.get_user_addresses(message.from_user.id)
            keyboard = get_addresses_keyboard(addresses)
            await message.answer(
                "üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard, parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞!")
    await state.clear()


@addresses_router.callback_query(F.data.startswith("edit_address_"))
async def handle_edit_address(callback: types.CallbackQuery, state: FSMContext):
    address_id = callback.data.replace("edit_address_", "")
    await state.update_data(address_id=address_id)
    await callback.answer()
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_edit_address_field_keyboard(address_id),
        parse_mode="HTML",
    )


@addresses_router.callback_query(F.data.startswith("edit_field_"))
async def handle_edit_field_choice(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    field_name = parts[2]
    address_id = callback.data.replace(f"edit_field_{field_name}_", "")
    await state.update_data(address_id=address_id, field=field_name)
    field_translation = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "city": "–≥–æ—Ä–æ–¥",
        "address": "–∞–¥—Ä–µ—Å",
        "index": "–∏–Ω–¥–µ–∫—Å",
    }
    await callback.answer()
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_translation[field_name]}:")
    await state.set_state(AddressStates.waiting_for_edit_field)


@addresses_router.message(AddressStates.waiting_for_edit_field)
async def handle_edit_field_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field = data["field"]
    address_id = data["address_id"]
    new_value = message.text.strip()

    if not new_value:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    if field == "index":
        if not new_value.isdigit():
            await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        new_value = int(new_value)

    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏
        addresses = await address_repo.get_user_addresses(message.from_user.id)
        current_address = next((a for a in addresses if str(a.id) == address_id), None)

        if not current_address:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º
        address_data = AddressPM(
            name=current_address.name if field != "name" else new_value,
            city=current_address.city if field != "city" else new_value,
            address=current_address.address if field != "address" else new_value,
            index=current_address.index if field != "index" else new_value,
        )

        updated = await address_repo.update_address(
            address_id=address_id, address_data=address_data
        )

        if updated:
            await message.answer("‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
            addresses = await address_repo.get_user_addresses(message.from_user.id)
            keyboard = get_addresses_keyboard(addresses)
            await message.answer(
                "üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard, parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞!")

    await state.clear()


@addresses_router.callback_query(F.data.startswith("delete_address_"))
async def handle_delete_address(callback: types.CallbackQuery, state: FSMContext):
    address_id = callback.data.replace("delete_address_", "")
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        success = await address_repo.delete_address(address_id)
        if success:
            await callback.answer("‚úÖ –ê–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω!")
            addresses = await address_repo.get_user_addresses(callback.from_user.id)
            keyboard = get_addresses_keyboard(addresses)
            await callback.message.edit_text(
                "üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard, parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")


@addresses_router.callback_query(F.data.startswith("address_"))
async def handle_address_detail(callback: types.CallbackQuery, state: FSMContext):
    address_id = callback.data.split("_")[1]
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        addresses = await address_repo.get_user_addresses(callback.from_user.id)
        address = next((a for a in addresses if str(a.id) == address_id), None)
        if address:
            text = (
                f"<b>–ê–¥—Ä–µ—Å:</b>\n"
                f"–ì–æ—Ä–æ–¥: {address.city}\n"
                f"–ê–¥—Ä–µ—Å: {address.address}\n"
                f"–ò–Ω–¥–µ–∫—Å: {address.index}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {address.name}"
            )
            await callback.answer()
            await callback.message.edit_text(
                text,
                reply_markup=get_address_manage_keyboard(address.id),
                parse_mode="HTML",
            )
        else:
            await callback.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")


@addresses_router.callback_query(F.data == "profile_addresses")
async def return_to_addresses(callback: types.CallbackQuery, state: FSMContext):
    async with db_connection.get_session() as session:
        address_repo = AddressRepo(session)
        addresses = await address_repo.get_user_addresses(callback.from_user.id)
        keyboard = get_addresses_keyboard(addresses)
        await callback.answer()
        await callback.message.edit_text(
            "üè† –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard, parse_mode="HTML"
        )
