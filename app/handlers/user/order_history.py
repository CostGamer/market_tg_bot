from aiogram import Router, types
from aiogram.filters import Command
from app.repositories import OrderRepo
from app.configs import db_connection
from app.services import OrderHistoryService
from logging import getLogger

logger = getLogger(__name__)

user_orders_router = Router()


@user_orders_router.message(Command("my_orders"))
async def show_user_orders(message: types.Message):
    try:
        async with db_connection.get_session() as session:
            order_repo = OrderRepo(session)
            order_service = OrderHistoryService(order_repo)

            orders = await order_repo.get_user_orders(message.from_user.id)  # type: ignore

            if not orders:
                await message.answer(
                    "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ üõí!",
                    parse_mode="HTML",
                )
                return

            await message.answer(
                f"üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã ({len(orders)} —à—Ç.):</b>", parse_mode="HTML"
            )

            for i, order in enumerate(orders, 1):
                await order_service.send_order_card(message, order, i)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}"  # type: ignore
        )
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
        )
