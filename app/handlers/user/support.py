from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from app.repositories import AdminSettingsRepo, UserRepo
from app.configs import db_connection, all_settings
from app.keyboards.support import get_support_faq_keyboard
from app.states import SupportStates
from app.services import ProfileService
from app.utils import is_valid_phone

support_router = Router()


@support_router.message(Command("support"))
async def start_support(message: types.Message, state: FSMContext):
    async with db_connection.get_session() as session:
        repo = AdminSettingsRepo(session)
        settings = await repo.get_settings()
        faq = settings.faq if settings and settings.faq else "FAQ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω."

    await message.answer(
        f"–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏:\n\n"
        f"{faq}\n\n"
        f"–í—ã –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å?",
        reply_markup=get_support_faq_keyboard(),
    )
    await state.set_state(SupportStates.waiting_for_faq_confirmation)


@support_router.message(SupportStates.waiting_for_faq_confirmation)
async def after_faq_confirmation(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()  # type: ignore
    if "–¥–∞" in text:
        await message.answer(
            "–†–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()
    elif "–Ω–µ—Ç" in text:
        async with db_connection.get_session() as session:
            service = ProfileService(UserRepo(session))
            user = await service.get_user(message.from_user.id)  # type: ignore
            username = user.tg_username if user and user.tg_username else None
            phone = user.phone if user and user.phone else None

        if username and phone:
            confirm_kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")],
                    [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
                ],
                resize_keyboard=True,
                one_time_keyboard=True,
            )
            await state.update_data(username=username, phone=phone)
            await message.answer(
                f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
                f"Username: {username}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
                f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.",
                reply_markup=confirm_kb,
            )
            await state.set_state(SupportStates.waiting_for_profile_confirm)
        else:
            skip_kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
                resize_keyboard=True,
                one_time_keyboard=True,
            )
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
                reply_markup=skip_kb,
            )
            await state.set_state(SupportStates.waiting_for_username)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@support_router.message(SupportStates.waiting_for_profile_confirm)
async def profile_confirm(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()  # type: ignore
    if "–≤–µ—Ä–Ω–æ" in text:
        await message.answer(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(SupportStates.waiting_for_question)
    elif "–∏–∑–º–µ–Ω–∏—Ç—å" in text:
        skip_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
            reply_markup=skip_kb,
        )
        await state.set_state(SupportStates.waiting_for_username)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@support_router.message(SupportStates.waiting_for_username, F.text)
async def get_support_username(message: types.Message, state: FSMContext):
    username = message.text.strip()  # type: ignore
    if username.lower() in {"-", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
        username = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    elif not username.startswith("@") or len(username) < 3:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
        )
        return
    await state.update_data(username=username)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567):",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(SupportStates.waiting_for_phone)


@support_router.message(SupportStates.waiting_for_phone, F.text)
async def get_support_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()  # type: ignore
    if not is_valid_phone(phone):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79001234567."
        )
        return
    await state.update_data(phone=phone)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(SupportStates.waiting_for_question)


@support_router.message(SupportStates.waiting_for_question, F.text)
async def get_support_question(message: types.Message, state: FSMContext):
    question = message.text.strip()  # type: ignore
    if not question:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É.")
        return

    data = await state.get_data()
    username = data.get("username")
    phone = data.get("phone")

    support_msg = (
        f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        f"Username: {username}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–í–æ–ø—Ä–æ—Å:\n{question}\n"
        f"Telegram ID: {message.from_user.id}"  # type: ignore
    )
    await message.bot.send_message(all_settings.different.support_group_id, support_msg)  # type: ignore
    await message.answer(
        "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )
    await state.clear()
