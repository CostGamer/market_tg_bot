from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.repositories import AdminSettingsRepo, UserRepo
from app.configs import db_connection, all_settings
from app.keyboards.support import get_support_faq_keyboard
from app.states import SupportStates
from app.services import ProfileService
from app.utils import is_valid_phone

support_router = Router()


@support_router.message(Command("support"))
async def start_support(message: types.Message, state: FSMContext):
    async with db_connection.get_session() as session:
        repo = AdminSettingsRepo(session)
        settings = await repo.get_settings()
        faq = settings.faq if settings and settings.faq else "FAQ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω."

    await message.answer(
        "‚ùì <b>–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏:</b>\n\n"
        f"{faq}\n\n"
        "üîç <b>–í—ã –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å?</b>",
        reply_markup=get_support_faq_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(SupportStates.waiting_for_faq_confirmation)


@support_router.callback_query(SupportStates.waiting_for_faq_confirmation)
async def after_faq_confirmation(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "faq_found":
        await callback.message.edit_text(  # type: ignore
            "üéâ <b>–†–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å!</b>\n"
            "–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä",
            parse_mode="HTML",
        )
        await state.clear()
    elif callback.data == "faq_not_found":
        async with db_connection.get_session() as session:
            service = ProfileService(UserRepo(session))
            user = await service.get_user(callback.from_user.id)
            username = user.tg_username if user and user.tg_username else None
            phone = user.phone if user and user.phone else None

        if username and phone:
            confirm_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="profile_confirm"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="profile_edit"
                        )
                    ],
                ]
            )
            await state.update_data(username=username, phone=phone)
            await callback.message.edit_text(  # type: ignore
                f"üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b>\n"
                f"üë§ Username: <code>{username}</code>\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n\n"
                "‚úÖ <b>–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.</b>",
                reply_markup=confirm_kb,
                parse_mode="HTML",
            )
            await state.set_state(SupportStates.waiting_for_profile_confirm)
        else:
            skip_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_username"
                        )
                    ]
                ]
            )
            await callback.message.edit_text(  # type: ignore
                "üë§ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>@username</code>) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
                reply_markup=skip_kb,
                parse_mode="HTML",
            )
            await state.set_state(SupportStates.waiting_for_username)


@support_router.callback_query(SupportStates.waiting_for_profile_confirm)
async def profile_confirm(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "profile_confirm":
        await callback.message.edit_text(  # type: ignore
            "‚úçÔ∏è <b>–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É:</b>", parse_mode="HTML"
        )
        await state.set_state(SupportStates.waiting_for_question)
    elif callback.data == "profile_edit":
        skip_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_username")]
            ]
        )
        await callback.message.edit_text(  # type: ignore
            "üë§ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>@username</code>) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
            reply_markup=skip_kb,
            parse_mode="HTML",
        )
        await state.set_state(SupportStates.waiting_for_username)


@support_router.callback_query(
    SupportStates.waiting_for_username, F.data == "skip_username"
)
async def skip_username(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(username="–Ω–µ —É–∫–∞–∑–∞–Ω")
    await callback.message.edit_text(  # type: ignore
        "üì± <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>+79001234567</code>):",
        parse_mode="HTML",
    )
    await state.set_state(SupportStates.waiting_for_phone)


@support_router.message(SupportStates.waiting_for_username, F.text)
async def get_support_username(message: types.Message, state: FSMContext):
    username = message.text.strip()  # type: ignore
    if username.lower() in {"-", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}:
        username = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    elif not username.startswith("@") or len(username) < 3:
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username</b>, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å <code>@</code>, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
            parse_mode="HTML",
        )
        return
    await state.update_data(username=username)
    await message.answer(
        "üì± <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>+79001234567</code>):",
        parse_mode="HTML",
    )
    await state.set_state(SupportStates.waiting_for_phone)


@support_router.message(SupportStates.waiting_for_phone, F.text)
async def get_support_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()  # type: ignore
    if not is_valid_phone(phone):
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>+79001234567</code>.",
            parse_mode="HTML",
        )
        return
    await state.update_data(phone=phone)
    await message.answer("‚úçÔ∏è <b>–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É:</b>", parse_mode="HTML")
    await state.set_state(SupportStates.waiting_for_question)


@support_router.message(SupportStates.waiting_for_question, F.text)
async def get_support_question(message: types.Message, state: FSMContext):
    question = message.text.strip()  # type: ignore
    if not question:
        await message.answer(
            "‚ùóÔ∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É.</b>", parse_mode="HTML"
        )
        return

    data = await state.get_data()
    username = data.get("username")
    phone = data.get("phone")

    support_msg = (
        f"üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n"
        f"üë§ Username: <code>{username}</code>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
        f"üÜî <a href='tg://user?id={message.from_user.id}'>–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º</a>\n\n"  # type: ignore
        f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question}"
    )
    await message.bot.send_message(  # type: ignore
        all_settings.different.support_group_id, support_msg, parse_mode="HTML"
    )
    await message.answer(
        "‚úÖ <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</b>\n"
        "‚è≥ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
        parse_mode="HTML",
    )
    await state.clear()
