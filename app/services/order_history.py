from aiogram import types
from app.repositories import OrderRepo
from app.models.pydantic_models import OrderPMGet
from logging import getLogger

logger = getLogger(__name__)


class OrderHistoryService:
    def __init__(self, order_repo: OrderRepo):
        self.order_repo = order_repo

    def _escape_html(self, text: str) -> str:
        if not text:
            return ""
        return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

    def _get_status_emoji(self, status: str) -> str:
        status_emojis = {
            "–ù–æ–≤—ã–π": "üÜï",
            "–û–ø–ª–∞—á–µ–Ω": "‚úÖ",
            "–ï–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥": "üì¶",
            "–ù–∞ —Å–∫–ª–∞–¥–µ": "üè≠",
            "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è": "üöö",
            "–û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è": "üìç",
            "–î–æ—Å—Ç–∞–≤–ª–µ–Ω": "‚úÖ",
            "–û—Ç–º–µ–Ω–µ–Ω": "‚ùå",
            "–ó–∞–∫—Ä—ã—Ç": "üîí",
        }
        return status_emojis.get(status, "üìÑ")

    def _format_order_text(self, order: OrderPMGet, order_number: int) -> str:
        description = self._escape_html(order.description)
        status = self._escape_html(order.status)
        status_emoji = self._get_status_emoji(order.status)

        text = (
            f"üÜî <b>–ó–∞–∫–∞–∑ #{order_number}</b>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order.quantity} —à—Ç.\n"
            f"üí¥ <b>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</b> {order.unit_price_rmb} —é–∞–Ω–µ–π ({order.unit_price_rub:.2f} —Ä—É–±.)\n"
            f"üí∞ <b>–ò—Ç–æ–≥–æ:</b> {order.final_price:.2f} —Ä—É–±.\n"
            f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
        )

        return text

    async def send_order_card(
        self, message: types.Message, order: OrderPMGet, order_number: int
    ):
        try:
            order_text = self._format_order_text(order, order_number)

            if order.photo_url:
                try:
                    await message.answer_photo(
                        photo=order.photo_url, caption=order_text, parse_mode="HTML"
                    )
                except Exception as e:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}: {e}"
                    )
                    await message.answer(order_text, parse_mode="HTML")
            else:
                await message.answer(order_text, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await message.answer(
                f"üÜî <b>–ó–∞–∫–∞–∑ #{order_number}</b>\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {order.final_price:.2f} —Ä—É–±.\n"
                f"üìÑ <b>–°—Ç–∞—Ç—É—Å:</b> {self._escape_html(order.status)}",
                parse_mode="HTML",
            )
