from typing import Dict, Any, Optional
from app.repositories import OrderRepo, AdminSettingsRepo
from app.models.pydantic_models import OrderPMPost, UserPM
from app.services import PriceCalculator
from app.configs.mappers import MAIN_CATEGORY_NAMES, SUBCATEGORY_NAMES
from aiogram import Bot
from app.configs import all_settings


class OrderService:
    def __init__(self, order_repo: OrderRepo, admin_settings_repo: AdminSettingsRepo):
        self.order_repo = order_repo
        self.admin_settings_repo = admin_settings_repo

    async def check_user_ready_for_order(
        self, user: Optional[UserPM], has_addresses: bool
    ) -> tuple[bool, Optional[str]]:
        if not user or not user.phone or not user.tg_username:
            error_msg = (
                "‚ùóÔ∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ username\n"
                "2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /order"
            )
            return False, error_msg

        if not has_addresses:
            error_msg = (
                "‚ùóÔ∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addresses –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞\n"
                "2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /order"
            )
            return False, error_msg

        return True, None

    def format_address(self, address: Dict[str, Any]) -> str:
        return f"{address['city']}, {address['address']}, {address['index']}, {address['name']}"

    def format_category(self, main_cat_id: str, sub_cat_id: Optional[str]) -> str:
        category_name = MAIN_CATEGORY_NAMES.get(main_cat_id, "")

        if sub_cat_id:
            subcategory_name = SUBCATEGORY_NAMES.get(main_cat_id, {}).get(
                sub_cat_id, ""
            )
            return f"{category_name} / {subcategory_name}"

        return category_name

    async def calculate_price_in_rubles(
        self, price_yuan: float, main_cat_id: str, sub_cat_id: Optional[str]
    ) -> float:
        calc = PriceCalculator(price_yuan, self.admin_settings_repo)
        rub, _ = await calc.calculate_price(
            price_yuan, category=main_cat_id, subcategory=sub_cat_id
        )
        return rub

    def format_order_review(self, data: Dict[str, Any]) -> str:
        address = data.get("address_full")
        address_str = self.format_address(address) if address else "[–Ω–µ –Ω–∞–π–¥–µ–Ω]"
        category_full = self.format_category(
            data.get("main_cat_id", ""), data.get("sub_cat_id")
        )

        unit_price = data.get("unit_price", 0)
        quantity = data.get("quantity", 1)
        final_price_yuan = unit_price * quantity
        final_price_rub = data.get("price_rub", 0) * quantity

        return (
            "üìã **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:**\n\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** {data.get('product_url')}\n"
            f"üì∏ **–§–æ—Ç–æ:** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_full}\n"
            f"üí¥ **–¶–µ–Ω–∞:** {unit_price} —é–∞–Ω–µ–π ({data.get('price_rub', 0):.2f} —Ä—É–±)\n"
            f"üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity}\n"
            f"üí∞ **–ò—Ç–æ–≥–æ:** {final_price_yuan} —é–∞–Ω–µ–π ({final_price_rub:.2f} —Ä—É–±)\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data.get('description')}\n"
            f"üìç **–ê–¥—Ä–µ—Å:** {address_str}\n"
            f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {data.get('phone')}\n"
            f"üë§ **Username:** @{data.get('tg_username')}\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
        )

    def prepare_order_data(self, data: Dict[str, Any], user_id: int) -> OrderPMPost:
        return OrderPMPost(
            description=data["description"],
            product_url=data["product_url"],
            final_price=float(data["unit_price"]) * int(data["quantity"]),
            status="–Ω–æ–≤—ã–π",
            quantity=int(data["quantity"]),
            unit_price=float(data["unit_price"]),
            photo_url=data["photo_url"],
            track_cn="",
            track_ru="",
            address_id=data["address_id"],
            user_id=user_id,
        )

    def format_admin_notification(
        self, order: OrderPMPost, data: Dict[str, Any]
    ) -> str:
        address = data.get("address_full")
        address_str = self.format_address(address) if address else "[–Ω–µ –Ω–∞–π–¥–µ–Ω]"
        category_full = self.format_category(
            data.get("main_cat_id", ""), data.get("sub_cat_id")
        )

        admin_comment = data.get("admin_comment", "")

        admin_text = (
            f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{data.get('tg_username')}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone')}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {order.product_url}\n"
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_full}\n"
            f"üí¥ <b>–¶–µ–Ω–∞:</b> {order.unit_price} —é–∞–Ω–µ–π √ó {order.quantity} = {order.final_price} —é–∞–Ω–µ–π "
            f"({data.get('price_rub', 0) * data.get('quantity'):.2f} —Ä—É–±)\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address_str}\n"
        )

        if admin_comment:
            admin_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {admin_comment}"

        return admin_text

    async def create_order(
        self, user_id: int, data: Dict[str, Any]
    ) -> Optional[OrderPMPost]:
        order_data = self.prepare_order_data(data, user_id)
        return await self.order_repo.create_order(user_id, order_data)

    async def send_admin_notification(
        self, bot: Bot, order: OrderPMPost, data: Dict[str, Any]
    ) -> None:
        admin_text = self.format_admin_notification(order, data)

        await bot.send_photo(
            chat_id=all_settings.different.orders_group_id,
            photo=order.photo_url,
            caption=admin_text,
            parse_mode="HTML",
        )

    async def submit_order(
        self, bot: Bot, user_id: int, data: Dict[str, Any]
    ) -> tuple[bool, str]:
        created_order = await self.create_order(user_id, data)

        if created_order:
            await self.send_admin_notification(bot, created_order, data)

            success_message = (
                "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            return True, success_message
        else:
            error_message = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return False, error_message
